---
- name: Configure Yensid Server
  hosts: yensid # This should match the host alias in your inventory/hosts.ini
  become: true # Most tasks here require root privileges
  vars:
    java_package_name: openjdk-17-jdk # Or your preferred JDK version (e.g., openjdk-11-jdk)
    app_user: configsrv
    app_group: configsrv
    app_dir: /opt/spring-boot-config-server
    app_jar_name: "my-config-server.jar" # Jenkins should deploy a JAR with this name to app_dir
    app_port: 8888 # Port for your Spring Boot Config Server
    node_exporter_version: "1.7.0" # Check for the latest stable version
    node_exporter_user: node_exporter
    node_exporter_group: node_exporter
    node_exporter_port: 9100
    node_exporter_download_url: "https://github.com/prometheus/node_exporter/releases/download/v{{ node_exporter_version }}/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"
    node_exporter_checksum: "sha256:YOUR_SHA256_CHECKSUM_HERE" # IMPORTANT: Get this from the release page

  tasks:
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes
      changed_when: false # Don't report change for just updating cache

    - name: Install necessary packages (Java, UFW, etc.)
      ansible.builtin.apt:
        name:
          - "{{ java_package_name }}"
          - ufw
          - tar # For unarchiving node_exporter
        state: present

    # Section 1: Spring Boot Config Server Setup
    - name: Create group for Spring Boot application
      ansible.builtin.group:
        name: "{{ app_group }}"
        state: present

    - name: Create user for Spring Boot application
      ansible.builtin.user:
        name: "{{ app_user }}"
        group: "{{ app_group }}"
        shell: /bin/false # No login shell for service accounts
        create_home: false
        state: present

    - name: Create application directory for Spring Boot
      ansible.builtin.file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0755'

    - name: Template Spring Boot systemd service file
      ansible.builtin.template:
        src: ../templates/spring-boot-config-server.service.j2
        dest: /etc/systemd/system/spring-boot-config-server.service
        owner: root
        group: root
        mode: '0644'
      notify: Reload systemd and restart config server # Handler defined below

    - name: Ensure Spring Boot config server service is enabled and started
      ansible.builtin.systemd:
        name: spring-boot-config-server
        enabled: yes
        state: started # Will start if not running, won't restart unless handler is called
        daemon_reload: yes # Reload systemd if the service file just changed

    # Section 2: Jenkins Deployment Preparations
    # The app_dir is already created with app_user:app_group ownership.
    # Jenkins (running as yensid_admin or another user) will need to place the JAR here.
    # If Jenkins runs as yensid_admin, it can use `sudo cp` or `sudo chown` temporarily.
    # A common approach for Jenkins to deploy:
    # 1. Jenkins copies JAR to a temp location on Yensid.
    # 2. Jenkins uses `sudo cp /tmp/my-config-server.jar {{ app_dir }}/{{ app_jar_name }}`.
    # 3. Jenkins uses `sudo chown {{ app_user }}:{{ app_group }} {{ app_dir }}/{{ app_jar_name }}`.
    # 4. Jenkins uses `sudo systemctl restart spring-boot-config-server`.
    # Alternatively, Jenkins triggers an Ansible playbook to handle the copy and restart.

    # Section 3: Prometheus Node Exporter Setup
    - name: Create group for Node Exporter
      ansible.builtin.group:
        name: "{{ node_exporter_group }}"
        state: present

    - name: Create user for Node Exporter
      ansible.builtin.user:
        name: "{{ node_exporter_user }}"
        group: "{{ node_exporter_group }}"
        shell: /bin/false
        create_home: false
        system: yes # Mark as system account
        state: present

    - name: Download and unarchive Node Exporter
      ansible.builtin.unarchive:
        src: "{{ node_exporter_download_url }}"
        dest: /tmp/ # Download and extract to a temporary location
        remote_src: yes
        # checksum: "{{ node_exporter_checksum }}" # UNCOMMENT AND PROVIDE CHECKSUM
        creates: "/tmp/node_exporter-{{ node_exporter_version }}.linux-amd64/node_exporter" # Avoid re-downloading if already extracted
      # Note: For production, ALWAYS use the checksum. Find it on the GitHub releases page for the specific version.
      # Example: For v1.7.0, go to https://github.com/prometheus/node_exporter/releases/tag/v1.7.0 and find the .sha256sum file.

    - name: Copy Node Exporter binary to /usr/local/bin
      ansible.builtin.copy:
        src: "/tmp/node_exporter-{{ node_exporter_version }}.linux-amd64/node_exporter"
        dest: /usr/local/bin/node_exporter
        owner: root
        group: root
        mode: '0755'
        remote_src: yes # Indicates source is on the remote machine
      notify: Restart node_exporter # Handler defined below

    - name: Template Node Exporter systemd service file
      ansible.builtin.template:
        src: ../templates/node_exporter.service.j2
        dest: /etc/systemd/system/node_exporter.service
        owner: root
        group: root
        mode: '0644'
      notify: Reload systemd and restart node_exporter # Handler

    - name: Ensure Node Exporter service is enabled and started
      ansible.builtin.systemd:
        name: node_exporter
        enabled: yes
        state: started
        daemon_reload: yes

    - name: Clean up Node Exporter downloaded files
      ansible.builtin.file:
        path: "/tmp/node_exporter-{{ node_exporter_version }}.linux-amd64"
        state: absent
      when: true # Always try to cleanup

    # Section 4: Firewall Configuration
    - name: Allow SSH (ensure it's there)
      community.general.ufw:
        rule: allow
        name: OpenSSH # Service name
        state: enabled

    - name: Allow Spring Boot Config Server port
      community.general.ufw:
        rule: allow
        port: "{{ app_port }}"
        proto: tcp
        state: enabled

    - name: Allow Node Exporter port
      community.general.ufw:
        rule: allow
        port: "{{ node_exporter_port }}"
        proto: tcp
        state: enabled

    - name: Enable UFW
      community.general.ufw:
        state: enabled

  handlers:
    - name: Reload systemd and restart config server
      ansible.builtin.systemd:
        name: spring-boot-config-server
        state: restarted
        daemon_reload: yes

    - name: Reload systemd and restart node_exporter
      ansible.builtin.systemd:
        name: node_exporter
        state: restarted
        daemon_reload: yes

    - name: Restart node_exporter # Simpler handler if only restart is needed
      ansible.builtin.systemd:
        name: node_exporter
        state: restarted
