---
- name: Configure Yensid Server
  hosts: yensid_target # Ensure this matches your inventory (e.g., localhost)
  become: true
  vars:
    java_package_name: openjdk-17-jdk
    app_user: configsrv
    app_group: configsrv
    app_dir: /opt/spring-boot-config-server
    app_jar_name: "my-config-server.jar"
    app_port: 8888
    node_exporter_version: "1.7.0"
    node_exporter_user: node_exporter
    node_exporter_group: node_exporter
    node_exporter_port: 9100
    node_exporter_download_url: "https://github.com/prometheus/node_exporter/releases/download/v{{ node_exporter_version }}/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"
    node_exporter_checksum: "sha256:YOUR_SHA256_CHECKSUM_HERE" # Get this from release page

    # New variables for Jenkins deployment user
    jenkins_deployer_user: yensid_deployer
    jenkins_deployer_group: yensid_deployer
    # PASTE THE ACTUAL PUBLIC KEY CONTENT HERE (ensure proper YAML formatting for multi-line string)
    jenkins_yensid_deployer_ssh_public_key_content: |
      ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHyourActualPublicKeyContentHere... jenkins-to-yensid

  tasks:
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes
      changed_when: false

    - name: Install necessary packages (Java, UFW, tar, sudo)
      ansible.builtin.apt:
        name:
          - "{{ java_package_name }}"
          - ufw
          - tar
          - sudo # Ensure sudo is installed (usually is, but good to be explicit)
        state: present

    # Section 1: Spring Boot Config Server Setup (remains the same)
    - name: Create group for Spring Boot application
      ansible.builtin.group:
        name: "{{ app_group }}"
        state: present

    - name: Create user for Spring Boot application
      ansible.builtin.user:
        name: "{{ app_user }}"
        group: "{{ app_group }}"
        shell: /bin/false
        create_home: false
        state: present

    - name: Create application directory for Spring Boot
      ansible.builtin.file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0755'

    - name: Template Spring Boot systemd service file
      ansible.builtin.template:
        src: ../templates/spring-boot-config-server.service.j2 # Ensure this template has the --spring.config.additional-location
        dest: /etc/systemd/system/spring-boot-config-server.service
        owner: root
        group: root
        mode: '0644'
      notify: Reload systemd and restart config server

    - name: Ensure Spring Boot config server service is enabled (but not necessarily started yet by Ansible)
      ansible.builtin.systemd:
        name: spring-boot-config-server
        enabled: yes
        # state: started # Jenkins will handle starting it after deployment
        daemon_reload: yes

    # Section 2: Prometheus Node Exporter Setup (remains the same)
    # ... (tasks for node exporter) ...
    - name: Create group for Node Exporter
      ansible.builtin.group:
        name: "{{ node_exporter_group }}"
        state: present

    - name: Create user for Node Exporter
      ansible.builtin.user:
        name: "{{ node_exporter_user }}"
        group: "{{ node_exporter_group }}"
        shell: /bin/false
        create_home: false
        system: yes
        state: present

    - name: Download and unarchive Node Exporter
      ansible.builtin.unarchive:
        src: "{{ node_exporter_download_url }}"
        dest: /tmp/
        remote_src: yes
        checksum: "{{ node_exporter_checksum }}" # UNCOMMENT AND PROVIDE CHECKSUM
        creates: "/tmp/node_exporter-{{ node_exporter_version }}.linux-amd64/node_exporter"

    - name: Copy Node Exporter binary to /usr/local/bin
      ansible.builtin.copy:
        src: "/tmp/node_exporter-{{ node_exporter_version }}.linux-amd64/node_exporter"
        dest: /usr/local/bin/node_exporter
        owner: root
        group: root
        mode: '0755'
        remote_src: yes
      notify: Restart node_exporter

    - name: Template Node Exporter systemd service file
      ansible.builtin.template:
        src: ../templates/node_exporter.service.j2
        dest: /etc/systemd/system/node_exporter.service
        owner: root
        group: root
        mode: '0644'
      notify: Reload systemd and restart node_exporter

    - name: Ensure Node Exporter service is enabled and started
      ansible.builtin.systemd:
        name: node_exporter
        enabled: yes
        state: started
        daemon_reload: yes

    - name: Clean up Node Exporter downloaded files
      ansible.builtin.file:
        path: "/tmp/node_exporter-{{ node_exporter_version }}.linux-amd64"
        state: absent
      when: true

    # Section 3: Jenkins Deployment User Setup (NEW SECTION)
    - name: Create group for Jenkins deployer user
      ansible.builtin.group:
        name: "{{ jenkins_deployer_group }}"
        state: present

    - name: Create Jenkins deployer user
      ansible.builtin.user:
        name: "{{ jenkins_deployer_user }}"
        group: "{{ jenkins_deployer_group }}"
        shell: /bin/bash # Give a bash shell for potential interactive debugging if needed
        create_home: yes
        state: present

    - name: Set up authorized_keys for Jenkins deployer user
      ansible.posix.authorized_key:
        user: "{{ jenkins_deployer_user }}"
        state: present
        key: "{{ jenkins_yensid_deployer_ssh_public_key_content }}"
        exclusive: no # Set to 'yes' if this should be the ONLY key for this user

    - name: Configure passwordless sudo for Jenkins deployer user (specific commands)
      ansible.builtin.lineinfile:
        path: /etc/sudoers.d/95-yensid-deployer
        line: "{{ jenkins_deployer_user }} ALL=(ALL) NOPASSWD: {{ item }}"
        create: yes
        owner: root
        group: root
        mode: '0440' # Secure permissions for sudoers files
        validate: /usr/sbin/visudo -cf %s # Validate sudoers file syntax
      loop:
        - /usr/bin/systemctl stop spring-boot-config-server
        - /usr/bin/systemctl start spring-boot-config-server
        - /usr/bin/systemctl daemon-reload
        - /usr/bin/systemctl status spring-boot-config-server
        - /usr/bin/mv /tmp/config-server-*.jar /opt/spring-boot-config-server/my-config-server.jar # Adjusted for wildcard
        - /usr/bin/mv /tmp/application-dynamic.properties.tmp /opt/spring-boot-config-server/application-dynamic.properties
        - /usr/bin/chown {{ app_user }}:{{ app_group }} /opt/spring-boot-config-server/*
        - /usr/bin/chmod 644 /opt/spring-boot-config-server/my-config-server.jar
        - /usr/bin/chmod 640 /opt/spring-boot-config-server/application-dynamic.properties
        # Add any other commands Jenkins might need to run via sudo
        # Example: /usr/bin/rm -f /tmp/config-server-*.jar /tmp/application-dynamic.properties.tmp (for cleanup on Yensid)

    # Section 4: Firewall Configuration (remains the same)
    # ... (UFW tasks) ...
    - name: Allow SSH (ensure it's there)
      community.general.ufw:
        rule: allow
        name: OpenSSH
        state: enabled

    - name: Allow Spring Boot Config Server port
      community.general.ufw:
        rule: allow
        port: "{{ app_port }}"
        proto: tcp
        state: enabled

    - name: Allow Node Exporter port
      community.general.ufw:
        rule: allow
        port: "{{ node_exporter_port }}"
        proto: tcp
        state: enabled

    - name: Enable UFW
      community.general.ufw:
        state: enabled

  handlers:
    - name: Reload systemd and restart config server
      ansible.builtin.systemd:
        name: spring-boot-config-server
        state: restarted
        daemon_reload: yes

    - name: Reload systemd and restart node_exporter
      ansible.builtin.systemd:
        name: node_exporter
        state: restarted
        daemon_reload: yes

    - name: Restart node_exporter
      ansible.builtin.systemd:
        name: node_exporter
        state: restarted
