# playbooks/springapps-with-metrics.yml
---
- name: Provision Spring-Boot App Hosts & Node Exporter
  hosts: springapps
  become: true

  vars:
    java_package_name: openjdk-17-jdk
    app_user: springapp
    app_group: springapp

    spring_apps:
      - name: bulk-data-watcher
        jar_name: bulk-data-watcher.jar
        port: 8081

    # Jenkins deployer
    jenkins_deployer_user: yensid_deployer
    jenkins_deployer_group: yensid_deployer
    jenkins_yensid_deployer_ssh_public_key_content: >
      ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILMl/T2j8nYXws8+FrC21IyClSWq6uf74CwnKGyPoTUq jenkins_yensid_deployer@yensid

    # Node Exporter
    node_exporter_version: "1.7.0"
    node_exporter_user: node_exporter
    node_exporter_group: node_exporter
    node_exporter_port: 9100
    node_exporter_download_url: "https://github.com/prometheus/node_exporter/releases/download/v{{ node_exporter_version }}/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"

  tasks:
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes
      changed_when: false

    - name: Install Java, UFW, tar, sudo
      ansible.builtin.apt:
        name:
          - "{{ java_package_name }}"
          - ufw
          - tar
          - sudo
        state: present

    # app user/group
    - name: Ensure system group for apps
      ansible.builtin.group:
        name: "{{ app_group }}"

    - name: Ensure system user for apps
      ansible.builtin.user:
        name: "{{ app_user }}"
        group: "{{ app_group }}"
        shell: /bin/false
        system: yes
        create_home: no

    # Jenkins deployer
    - name: Ensure Jenkins deployer group
      ansible.builtin.group:
        name: "{{ jenkins_deployer_group }}"

    - name: Ensure Jenkins deployer user
      ansible.builtin.user:
        name: "{{ jenkins_deployer_user }}"
        group: "{{ jenkins_deployer_group }}"
        shell: /bin/bash
        create_home: yes

    - name: Install Jenkins deployer SSH key
      ansible.posix.authorized_key:
        user: "{{ jenkins_deployer_user }}"
        key: "{{ jenkins_yensid_deployer_ssh_public_key_content }}"

    - name: Grant Jenkins deployer passwordless sudo
      ansible.builtin.copy:
        dest: "/etc/sudoers.d/{{ jenkins_deployer_user }}"
        content: |
          {{ jenkins_deployer_user }} ALL=(ALL) NOPASSWD: \
          /usr/bin/systemctl, /usr/bin/mv, /usr/bin/chown, \
          /usr/bin/chmod, /usr/bin/mkdir
        mode: '0440'

    # firewall
    - name: Allow SSH in UFW
      community.general.ufw:
        rule: allow
        name: OpenSSH
        state: enabled

    - name: Allow app ports in UFW
      community.general.ufw:
        rule: allow
        port: "{{ item.port }}"
        proto: tcp
        state: enabled
      loop: "{{ spring_apps }}"

    - name: Allow Node Exporter port in UFW
      community.general.ufw:
        rule: allow
        port: "{{ node_exporter_port }}"
        proto: tcp
        state: enabled

    - name: Ensure UFW is enabled
      community.general.ufw:
        state: enabled

    # provision each microservice via include_tasks + loop
    - name: Provision each Spring-Boot app
      include_tasks: provision-app.yml
      loop: "{{ spring_apps }}"
      loop_control:
        loop_var: app

    # install node_exporter
    - name: Ensure group for node_exporter
      ansible.builtin.group:
        name: "{{ node_exporter_group }}"

    - name: Ensure user for node_exporter
      ansible.builtin.user:
        name: "{{ node_exporter_user }}"
        group: "{{ node_exporter_group }}"
        shell: /bin/false
        system: yes
        create_home: no

    - name: Download Node Exporter archive
      ansible.builtin.get_url:
        url: "{{ node_exporter_download_url }}"
        dest: "/tmp/node_exporter-{{ node_exporter_version }}.tar.gz"

    - name: Unarchive Node Exporter
      ansible.builtin.unarchive:
        src: "/tmp/node_exporter-{{ node_exporter_version }}.tar.gz"
        dest: /tmp
        remote_src: yes

    - name: Copy Node Exporter binary
      ansible.builtin.copy:
        src: "/tmp/node_exporter-{{ node_exporter_version }}.linux-amd64/node_exporter"
        dest: /usr/local/bin/node_exporter
        mode: '0755'
        remote_src: yes

    - name: Deploy node_exporter systemd unit
      ansible.builtin.template:
        src: "{{ playbook_dir }}/../templates/node_exporter.service.j2"
        dest: /etc/systemd/system/node_exporter.service
        mode: '0644'
      notify: "daemon-reload-and-restart node_exporter"

    - name: Enable & start node_exporter
      ansible.builtin.systemd:
        name: node_exporter
        enabled: yes
        state: started
        daemon_reload: yes

    - name: Remove Node Exporter tarball
      ansible.builtin.file:
        path: "/tmp/node_exporter-{{ node_exporter_version }}.tar.gz"
        state: absent

    - name: Remove Node Exporter extracted folder
      ansible.builtin.file:
        path: "/tmp/node_exporter-{{ node_exporter_version }}.linux-amd64"
        state: absent

  handlers:
    - name: "daemon-reload-and-restart {{ svc_name }}"
      ansible.builtin.systemd:
        name: "{{ svc_name }}"
        daemon_reload: yes
        state: restarted

    - name: "daemon-reload-and-restart node_exporter"
      ansible.builtin.systemd:
        name: node_exporter
        daemon_reload: yes
        state: restarted
